openapi: 3.0.3
info:
  title: In‑Memory Exchange Order Book API
  version: 1.1.0
  description: |
    Minimal HTTP API for an in‑memory limit order book.
    
    Authentication for mutating endpoints uses VALR‑style HMAC:
    signature = HMAC_SHA512(secret, `timestamp + verb + path + body`).
    
    Provide the following headers on POST /api/orders/{symbol}:
    - X-VALR-API-KEY
    - X-VALR-TIMESTAMP (unix millis as string)
    - X-VALR-SIGNATURE (hex)
servers:
  - url: http://localhost:8080

paths:
  /healthz:
    get:
      summary: Health check
      operationId: healthz
      tags: [System]
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema: { type: string, example: ok }

  /api/orderbook/{symbol}:
    get:
      summary: Get order book snapshot
      operationId: getOrderBook
      tags: [OrderBook]
      parameters:
        - name: symbol
          in: path
          required: true
          schema: { type: string }
        - name: depth
          in: query
          required: false
          description: Number of levels to return on each side (top-N)
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
      responses:
        "200":
          description: Snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderBookSnapshot'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/orders/{symbol}:
    post:
      summary: Submit limit order
      operationId: submitOrder
      tags: [Orders]
      parameters:
        - name: symbol
          in: path
          required: true
          schema: { type: string }
        - $ref: '#/components/parameters/ApiKeyHeader'
        - $ref: '#/components/parameters/TimestampHeader'
        - $ref: '#/components/parameters/SignatureHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitOrderRequest'
            examples:
              gtc:
                value: { side: BUY, price: "100", quantity: "0.5" }
              ioc:
                value: { side: BUY, price: "100", quantity: "0.5", timeInForce: IOC }
              fok:
                value: { side: BUY, price: "100", quantity: "0.5", timeInForce: FOK }
      responses:
        "200":
          description: Created order + trades
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitOrderResponse'
        "403":
          description: Forbidden (missing/invalid auth headers or wrong content-type)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/trades/{symbol}:
    get:
      summary: Recent trades
      operationId: getRecentTrades
      tags: [Trades]
      parameters:
        - name: symbol
          in: path
          required: true
          schema: { type: string }
        - name: limit
          in: query
          description: Number of recent trades to return (newest first)
          schema:
            type: integer
            minimum: 0
            maximum: 1000
            default: 50
      responses:
        "200":
          description: List of trades
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trade'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    ApiKeyHeader:
      type: apiKey
      in: header
      name: X-VALR-API-KEY
      description: API key identifier
    TimestampHeader:
      type: apiKey
      in: header
      name: X-VALR-TIMESTAMP
      description: Unix timestamp in milliseconds, as a string
    SignatureHeader:
      type: apiKey
      in: header
      name: X-VALR-SIGNATURE
      description: Hex HMAC-SHA512 of timestamp + verb + path + body using the API secret
  parameters:
    ApiKeyHeader:
      name: X-VALR-API-KEY
      in: header
      required: true
      description: API key identifier
      schema: { type: string }
    TimestampHeader:
      name: X-VALR-TIMESTAMP
      in: header
      required: true
      description: Unix timestamp in milliseconds, as a string
      schema: { type: string }
    SignatureHeader:
      name: X-VALR-SIGNATURE
      in: header
      required: true
      description: Hex HMAC-SHA512 of timestamp + verb + path + body using the API secret
      schema: { type: string }
  schemas:
    SubmitOrderRequest:
      type: object
      required: [side, price, quantity]
      properties:
        side: { type: string, enum: [BUY, SELL] }
        price:
          type: string
          description: Price as string to preserve decimal precision
          example: "100.00"
        quantity:
          type: string
          description: Quantity as string to preserve decimal precision
          example: "0.50"
        timeInForce:
          type: string
          description: Time in force for the order
          enum: [GTC, IOC, FOK]
          default: GTC
    SubmitOrderResponse:
      type: object
      required: [order, trades]
      properties:
        order:
          $ref: '#/components/schemas/Order'
        trades:
          type: array
          items:
            $ref: '#/components/schemas/Trade'
    Order:
      type: object
      required: [id, symbol, side, price, quantity, remaining, timestamp, timeInForce]
      properties:
        id: { type: string }
        symbol: { type: string }
        side: { type: string, enum: [BUY, SELL] }
        price: { type: string, example: "100.00" }
        quantity: { type: string, example: "1.00" }
        remaining: { type: string, example: "1.00" }
        timestamp: { type: integer, format: int64 }
        timeInForce: { type: string, enum: [GTC, IOC, FOK] }
    Trade:
      type: object
      required: [id, price, quantity, takerOrderId, makerOrderId, timestamp]
      properties:
        id: { type: string }
        price: { type: string, example: "100.00" }
        quantity: { type: string, example: "0.50" }
        takerOrderId: { type: string }
        makerOrderId: { type: string }
        timestamp: { type: integer, format: int64 }
    Level:
      type: object
      required: [price, quantity]
      properties:
        price: { type: string, example: "100.00" }
        quantity: { type: string, example: "0.50" }
    OrderBookSnapshot:
      type: object
      required: [symbol, bids, asks]
      properties:
        symbol: { type: string }
        bids:
          type: array
          description: Sorted descending (best bid first)
          items:
            $ref: '#/components/schemas/Level'
        asks:
          type: array
          description: Sorted ascending (best ask first)
          items:
            $ref: '#/components/schemas/Level'
    ErrorResponse:
      type: object
      required: [error]
      properties:
        error: { type: string }
        details:
          type: string
          nullable: true
